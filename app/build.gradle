import java.util.function.BiConsumer

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: "de.mannodermaus.android-junit5"

Properties loadProperties(String buildType) {
    def props = new Properties()
    def filename = buildType + ".properties"
    try {
        file(filename).withInputStream { props.load(it) }
        return props
    } catch (FileNotFoundException e) {
        throw new Exception("Config not found ($filename). Check out config-example.properties file.")
    }
}

HashMap<String, String> loadPropertiesIntoMap(String buildType) {
    def map = new HashMap<String, String>()
    loadProperties(buildType).forEach(new BiConsumer<Object, Object>() {
        @Override
        void accept(Object key, Object value) {
            map.put(key, value)
        }
    })
    return map
}

android {
    compileSdkVersion androidCompileSdkVersion
    defaultConfig {
        applicationId "ba.klika.androidtemplate"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    buildTypes {
        debug {
            for (Map.Entry<String, String> entry : loadPropertiesIntoMap("debug").entrySet()) {
                buildConfigField "String", entry.key, "\"${entry.value}\""
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            for (Map.Entry<String, String> entry : loadPropertiesIntoMap("release").entrySet()) {
                buildConfigField "String", entry.key, "\"${entry.value}\""
            }
        }
    }

    lintOptions {
        abortOnError true
        warningsAsErrors true
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
                unitTests.all {
                    testLogging.events = ["passed", "skipped", "failed"]
                }
            }
        }
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // AndroidX
    kapt "androidx.lifecycle:lifecycle-compiler:$androidLifecycleVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.annotation:annotation:$androidAnnotationVersion"
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "com.google.android.material:material:$googleMaterialVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$androidLifecycleVersion"

    // Reactive
    implementation "io.reactivex.rxjava2:rxjava:$rxJava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "javax.annotation:jsr250-api:$javaxAnnotationVersion"
    implementation "javax.inject:javax.inject:$javaxInjectVersion"

    // Networking
    implementation "com.squareup.okhttp3:okhttp:$okhttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3Version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2Version"

    // Database
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // Other libraries
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Dependency injection
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    // Testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.arch.core:core-testing:$archComponentsVersion"
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    // Android testing
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-instrumentation-test-runner:$junit5RunnerVersion"
}

kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}
